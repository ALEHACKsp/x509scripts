#!/bin/bash -
if [ ! -n "$BASH_VERSION" ];then exec bash "$0" "$@";else set +o posix;fi
set -e
export OPENSSL_CONF=/dev/null
CERT_DIR="${CERT_DIR:-.}"

FN=
KFN=
SERIAL=

V3=no
V3HEAD=
SANLIST=
V3OPTS=
V3LIST=
V3EXTRAS=
V3CERTONLY=
V3CA=
V3CAPATH=
V3CLIENT=no
V3SERVER=no
V3CRITICAL=no
V3NS=no

NOPKEY="$(openssl no-pkey >/dev/null 2>&1 && echo yes || echo no)"
NOECPARAM="$(openssl no-ecparam >/dev/null 2>&1 && echo yes || echo no)"
KEYPASS=
KEYPARAM=no
WANTCSR=no
ADDDNQ=no
SIGNFN=
RSABITS=2048
PKCS12FN=

# This is my default for making a key file.
if [ "$NOECPARAM" = no ] ; then
    mkkey() { openssl ecparam -name prime256v1 -genkey ;}
else
    echo "$NOECPARAM"
    mkkey() { openssl genrsa $RSABITS ; }
fi
# See also:
# mkkey() { openssl genpkey -paramfile <(openssl genpkey -genparam -algorithm ec -pkeyopt ec_paramgen_curve:prime256v1) ;}

NL='
'
X509SECT=req_x509
V3INIT="x509_extensions = $X509SECT$NL[ $X509SECT ]$NL"

for ar
do  case "$ar" in

    -days[=:]* ) CERT_DAYS="${ar#*[=:]}" ;;
    -out[=:]* ) FN="${ar#*[=:]}" ;;
    -keyout[=:]* ) KFN="${ar#*[=:]}" ;;

    -ser[=:]??*|-serial[=:]??* ) SERIAL="${ar#*[=:]}" ;;
    -dnq ) ADDDNQ=yes ;;

    -rsa[=:]* ) eval "mkkey() { openssl genrsa '${ar#*[=:]}' ; }" ;;
    -dsa[=:]* ) eval "mkkey() { openssl dsaparam -genkey '${ar#*[=:]}' ; }" ;;
    -ec[=:]* ) 
	    ar="${ar#*[=:]}:" ; curve="${ar%%:*}"
	    ar="${ar#*:}:" ; param="${ar%%:*}"
	    ar="${ar#*:}:" ; noseed="${ar%%:*}"
	    eval "mkkey() { openssl ecparam -name '$curve' ${param:+-param_enc $param} ${noseed:+-no_seed} -genkey ; }"
	    ;;
    -rsa ) eval "mkkey() { openssl genrsa $RSABITS ; }" ;;

    -list[-_]curves|-show[_-]curves )
	openssl ecparam -list_curves ; exit ;;

    -keyfile[=:]* )
	eval "mkkey() { cat < '${ar#*[=:]}' ; }"
	[ "$KFN" = "" ] && KFN=/dev/null
	;;

    -param ) KEYPARAM=yes ;;

    -csr ) WANTCSR=yes ;;
    -csrin[=:]* )
	eval "mkkey() { :; }"
	CSRFN="${ar#*[=:]}"
	WANTCSR=yes
	KFN=/dev/null
	;;

    -sign[=:]* )
	SIGNFN="${ar#*[=:]}"
	WANTCSR=yes
	;;

    -pkcs12[=:]* ) PKCS12FN="${ar#*[=:]}" ;;

    -pass[=:]*:* ) KEYPASS="${ar#*[=:]}" ;;
    -pass[=:]* ) KEYPASS="pass:${ar#*[=:]}" ;;

    -md4|-md5|-ripemd160|-sha|-sha1|-sha224|-sha256|-sha384|-sha512|-whirlpool)
	DGST=$ar ;;

    -v3 ) V3=yes ;;
    -ca|-v3ca ) V3=yes ; V3CA=yes ;;
    -lastca|-v3lastca ) V3=yes ; V3CA=yes ; V3CAPATH=0 ;;
    -v3usr ) V3=yes ; V3CA=no ;;
    -server ) V3=yes ; V3CA=${V3CA:-no} ; V3SERVER=yes ;;
    -client ) V3=yes ; V3CA=${V3CA:-no} ; V3CLIENT=yes ;;
    -v3ns ) V3=yes ; V3NS=yes ;;
    -v3crit|-v3critical|-critical ) V3=yes ; V3CRITICAL=yes ; V3CA=${V3CA:-no} ;;

    -v3[=:]* )
	    V3=yes
	    V3LIST="$V3LIST$NL${ar#*[=:]}"
	    ;;

    -v3xt[=:]* )
	    V3=yes
	    V3EXTRAS="$V3EXTRAS$NL${ar#*[=:]}$NL"
	    ;;

    -san[=:]* )
	    V3=yes
	    san="${ar#*[=:]}"
	    [ "$SANLIST" != "" ] && SANLIST="$SANLIST,"
	    case "$san" in
	    [0-9]*.*[0-9] ) SANLIST="${SANLIST}IP:$san" ;;
	    *@* ) SANLIST="${SANLIST}email:$san" ;;
	    * ) SANLIST="${SANLIST}DNS:$san" ;;
	    esac
	    ;;

    /*=* )
	if [ "$SUBJ" != "" ] ; then
	    echo >&1 Duplicate subject name definition ; exit 1
	fi
	SUBJ="$ar"
	;;

    -*|*/*) echo >&2 "Unknown option: $ar" ; exit 1 ;;

    * ) if [ "$SUBJ" != "" ] ; then
	    SUBJ="${SUBJ%/}/OU=$ar/"
	else
	    SUBJ="/CN=$ar/" ; CN="$ar"
	fi
	;;
    esac
done

[ "$SANLIST" != "" ] && {
    if [ "$CN" = "" ]
    then SANLIST="subjectAltName=$SANLIST"
    else SANLIST="subjectAltName=DNS:$CN,$SANLIST"
    fi
}

# Build some V3 certificate extension sets.
# 
[ "$V3" = yes ] && {
    V3HEAD="$V3INIT"
    V3XKU=
    [ "$V3CRITICAL" = yes ] && CR=critical, || CR=

    V3CAPATH=${V3CAPATH:+, pathlen:$V3CAPATH}

    [ "$V3CA" = yes ] && {
	V3OPTS="$V3OPTS${NL}basicConstraints = ${CR}CA:TRUE${V3CAPATH}"
	V3XKU=keyCertSign,cRLSign,
    }
    [ "$V3CA" = no ] && V3OPTS="$V3OPTS${NL}basicConstraints = ${CR}CA:FALSE"

    # keyAgreement seems to be a little used replacement for digitalSignature
    # that can only be used on a server.

    if [ "$V3CLIENT" = yes -a "$V3SERVER" = yes ]
    then
        V3OPTS="$V3OPTS${NL}keyUsage = ${CR}${V3XKU}keyEncipherment,digitalSignature,keyAgreement"
        V3OPTS="$V3OPTS${NL}extendedKeyUsage = serverAuth,clientAuth"
	[ "$V3NS" = yes ] && V3OPTS="$V3OPTS${NL}nsCertType = client,server"
    elif [ "$V3SERVER" = yes ]
    then
        V3OPTS="$V3OPTS${NL}keyUsage = ${CR}${V3XKU}keyEncipherment,digitalSignature,keyAgreement"
        V3OPTS="$V3OPTS${NL}extendedKeyUsage = serverAuth"
	[ "$V3NS" = yes ] && V3OPTS="$V3OPTS${NL}nsCertType = server"
    elif [ "$V3CLIENT" = yes ]
    then
        V3OPTS="$V3OPTS${NL}keyUsage = ${CR}${V3XKU}digitalSignature"
        V3OPTS="$V3OPTS${NL}extendedKeyUsage = clientAuth"
	[ "$V3NS" = yes ] && V3OPTS="$V3OPTS${NL}nsCertType = client"
    fi

    [ "$V3CA" != '' ] && {
	V3OPTS="$V3OPTS${NL}subjectKeyIdentifier=hash"
	V3CERTONLY="$V3CERTONLY${NL}authorityKeyIdentifier=keyid,issuer${NL}"
    }
}

[ -s "$FN" ] &&
    { echo ERROR: File $FN already exists ; exit 1 ; }

[ "$WANTCSR" = yes ] && X509= || X509=-x509

[ "$ADDDNQ" = yes ] && {
    [ "$SERIAL" = "" ] &&
	SERIAL="$(openssl rand -hex 8)"
    SUBJ="${SUBJ%/}/dnQualifier=$SERIAL/"
}

mkreqconf() {
    echo '[req]'
    echo 'distinguished_name = req_distinguished_name'
    echo "$V3HEAD"
    echo "$V3OPTS"
    [ "$1" != yes ] && echo "$V3CERTONLY"
    echo "$SANLIST"
    echo "$V3LIST"
    echo '[ req_distinguished_name ]'
    echo 'organizationalUnitName = Organizational Unit Name'
    echo 'commonName = Common Name'
    echo "$V3EXTRAS"
}

SSKEY="$(mkkey)"
if [ "$SCRFN" != "" ]
then SSCERT="$(cat "$CSRFN")"
else SSCERT="$(openssl req -new $X509 $DGST \
	-days "${CERT_DAYS:-3652}" \
	${SERIAL:+-set_serial 0x"$SERIAL"} \
	${SUBJ:+-subj "$SUBJ"} \
	-key <(echo "$SSKEY") \
	-config <(mkreqconf $WANTCSR) \
	${V3HEAD:+-reqexts "$X509SECT"} )"
fi

[ "$SIGNFN" != "" ] && {
    [ "$SERIAL" = "" ] && SERIAL="$(openssl rand -hex 8)"

    SSCERT="$(echo "$SSCERT" |
	openssl x509 -req \
	    -days "${CERT_DAYS:-3652}" \
	    ${SERIAL:+-set_serial 0x"$SERIAL"} \
	    -CA "$SIGNFN" \
	    ${V3HEAD:+-extfile <(mkreqconf) -extensions "$X509SECT"} )"

    WANTCSR=no
}

[ "$PKCS12FN" != "" ] && {
    [ "$WANTCSR" = yes ] && { echo >&2 "PKCS12 files can't hold csr's"; exit 1;}
    openssl pkcs12 -export -passout pass: \
	-out "$PKCS12FN" \
	-name "$CN `date`" \
	-inkey <(echo "$SSKEY") \
	-in <(echo "$SSCERT") \
	${SIGNFN:+-certfile <(openssl x509 -in "$SIGNFN") }
}

outp() {
    if [ "$WANTCSR" = yes ]
    then echo "$SSCERT" | openssl req -subject
    else echo "$SSCERT" | openssl x509 -subject -issuer -serial -dates
    fi
    if [ "$KFN" = '/dev/null' ]
    then :
    elif [ "$KFN" != '' ]
    then umask 077
         outk > "$KFN"
    else outk
    fi
}

outk() {
    if [ "$NOPKEY" = no -o "$KEYPASS" != "" -o "$KEYPARAM" = yes ]
    then [ "$KEYPARAM" = no ] ||
	    echo "$SSKEY" | openssl pkeyparam 2>/dev/null ||:
	 echo "$SSKEY" | openssl pkey ${KEYPASS:+-des3 -passout "$KEYPASS"}
    else echo "$SSKEY"
    fi
}

[ "$KFN" = '' ] && umask 077
if [ "$FN" != '' ] ; then outp > "$FN" ; else outp ; fi
