#!/bin/bash
if [ ! -n "$BASH_VERSION" ];then exec bash "$0" "$@";else set +o posix;fi
set -e
PROGRAM="$0"

show_help_text() {

    echo "Usage: $PROGRAM [Common Name] [arguments]"

cat <<\!

This script can create most styles of x509 certificate from the command
line.  All options can be configured from arguments and the standard
OpenSSL configuration file is not used. The default is to prompt for a
common name (plus OU and dnQualifier) and generate an ec:prime256r1 key
and certificate which is sent to the standard output.

Options:

    -subj-cn=String
    -subj-ou=String
    -subj-dc=String
    -subj-o=String
    -subj-l=String
    -subj-st=String
    -subj-c=String
    -subj:oid=value

	Set a component of the certificate subject. Some items such as
	DC, OU and CN are allowed to be duplicated. OpenSSL will accept
	duplicates for any item.

	The OU is the most likely to be accepted as a place to store
	any unusual part of a name you may wish to include.

	Any arguments without a "-" to make them an option are assumed
	to be part of the subject too, the first is a common name the
	remainder are "OU" items.

	If a argument begins with a "/" and contains an "=" it is
	treated as an OpenSSL subject string. This conflicts with the
	other options for building a subject.

	The bare "-subj:" version copies the string "oid=value" to the
	end of the section of the configuration. This allows any of the
	possible name parts (surname, info, favouriteDrink, CSPName, etc)
	to be added in any order. If OpenSSL doesn't know a particular
	oid the numeric value can be used.

	If no subject is specified one will be prompted for by OpenSSL.
	NOTE: If you are adding a SAN list the common name prompted for
	by OpenSSL will NOT be in the list unless you add it there too.

    -days=7304
	How many days should the certificate run for?

    -alldays
	Make the certificate run until 9999-12-31

    -out=FileName
	Put the certificate, and any other items in a file.

    -keyout=FileName
	Put the private key in a specific file not "-out=" or stdout.

    -crlout=FileName
	Generate an empty CRL using the certificate used to sign.

    -caout=FileName
	Put the certificate used to sign in a specific file.

    -ser=0123456789abcdef
    -serial=0123456789abcdef
	Set the certificate serial number (in hexadecimal).
	Various noise characters will be removed.

    -dnq
	Generate and add a dnQualifier item to the subject.
	This is the original way of making sure that the subject of
	a certificate is unique. It was only needed within an org
	as the other DN components were sufficient for identifing
	organisations.

    -dnq=...
	Add a dnQualifier item to the subject.

    -no-prompt
	Prevent OpenSSL prompting for any part of the subject.

    -ec:prime256v1
    -ec:curve:encoding
    -ec:curve:encoding:no_seed
	Use OpenSSL ecparam to generate an EC key.

    -rsa
    -rsa=2048
	Generate RSA private keys.

    -dsa
    -dsa=1024
	Generate DSA private keys.
	NB: This also makes the default digest SHA1.

    -list-curves
    -show-curves
	List the EC curves that OpenSSL supports.

    -keyfile=FileName
	Don't generate a key, use the one in FileName

    -csr
	Create a CSR not a certificate

    -csrin=FileName
	Use the CSR from FileName instead of generating a new key.

    -showcsr
	Dump any CSR we use to the output too.

    -sign=FileName
	Use the key and certificate in FileName to sign the certificate,
	note if it's a PFX file it must have a ".pfx" extension.

    -singleuseca
    -suca
	Generate a new CA key for the CA certificate and to sign the standard
	certificate. Discard the CA key and send the CA certificate to the
	output.

    -v3singleuseca
    -v3suca
	Same but always make the CA a V3 certificate with the CA flag.

    -casubj=...
	Set the subject for the single use CA.

    -pkcs12=FileName
    -pfx=FileName
	Create a "pfx" file with the certificate, private key and the
	CA certificate used to sign the certificate.

    -pass:password
    -pass=OpenSSL:pass
	Set a password on the key.

    -dgst=sha1
    -ripemd160, -sha, -sha1, -sha224, -sha256, -sha384, -sha512, -whirlpool
	Select the digest used for signing.

    -cipher=name
	Select the cipher used for encrypting.

    -openssl=/path/to/executable/openssl
	Use the specified copy of openssl, not the one in the PATH.

    -showconf
	Debugging option, show the config files generated for OpenSSL

Version 3 certificate extensions.

    Note V3 extensions are used to limit the uses that a certificate
    can be put to. If you're not concerned with limiting use of the
    private key (ie the user is trusted) then these generally have
    no use. However, some validators insist on certain V3 extensions
    being present.

    The SAN extension is a minor exception to this as it allows multiple
    wildcard DNS names whereas browsers only accept one wildcard CN
    item in the subject. In addition some browsers are rejecting all
    certificates that don't have a SAN extension.

    -v3
	Make the certificate V3, don't add any extensions though.

    -v3san=SanName
    -san=SanName
	Add a SAN name, or multiple items seperated by commas.
	A dumb huristic is used to identify DNS vs IP vs email items.

    -v3san, -san
	Make a san from the common name even if there are no others.

    -v3ca, -ca
	Add normal V3 extensions for a CA certificate.

    -v3basicca
	Add only the basic extension for a CA certificate.

    -v3crlsign, -crlsign, -v3crl
	For a V3 CA certificate, make sure it's allowed to sign CRLs.

    -v3lastca, -lastca
	Make a V3 CA certificate with the 'pathlen:0' option to prevent
	certificates that this CA signs being CAs.

    -v3nokeyid, -nokeyid
	Disable the "Subject Key Identifier" and "Authority Key Identifier"
	additions.

    -v3usr, -v3user, -usr, -user
	Prevent this V3 certificate begin used as a CA.

    -v3server, -server
	Add V3 key usage extensions to prevent the certificate being used
	as anything except an SSL server.
	NB: Can be combined with -v3client or -v3email to allow those.

    -v3client, -client
	Add V3 key usage extensions to prevent the certificate being used
	as anything except an SSL client.
	NB: Can be combined with -v3server or -v3email to allow those.

    -v3email, -email
	Add V3 key usage extensions to prevent the certificate being used
	as anything except a MIME signing or encryption certificate.
	NB: Can be combined with -v3server or -v3client to allow those.

    -v3timestamp, -timestamp
	Add V3 key usage extensions for timestamp signing. This can NOT
	be combined with other key usages.

    -v3ns, -ns
	Add the netscape Client/server extensions too.

    -v3ns=...
    -ns=...
	Add a specific list of netscape usages.

    -v3crit, -v3critical, -critical
	Mark CA, key usage and extended key usage extensions as critical.
	Beware:
	    https://en.wikipedia.org/wiki/X.509#Implementation_issues

    -poltext=FileName
	Add an "all uses" policy extension and include the text from
	FileName as an "issuer statement".

    -policy=OID
	The first one of these sets the OID for the '-poltext' option if
	present. Additional '-policy' arguments add extra policy extensions.

    -v3crluri=..., -crlurl=...
	Add a "CRL Distribution Point" item to the certificate extensions.

    -v3dv|-dv )
	Make the certificate policy "Domain validated" and set most
	of the other stuff that's supposed to be set.
	BUT would also need:
	    The certificate must be signed by a CA (not self-signed)
	    Add authorityInformationAccess extension
	    with OCSP over HTTP
	    and HTTP URL for issuing certificate

    -v3='OpenSSL extension config'
	Add any x509 v3 extension config to the OpenSSL config file used
	to create the certificate.

    -v3xt='OpenSSL extension config'
    -xt='OpenSSL extension config'
	Add any x509 v3 extension config to the OpenSSL config file used
	to create the certificate.

	This item is placed after the all "-v3=" items so can be used when
	the config file needs additional sections.
!

    exit 0
}

main() {
    init_vars
    decode_args "$@"
    check_args

    [[ "$KFN" != '' && "$KFN" != /dev/null && -s "$KFN" ]] &&
	{ echo "ERROR: File $KFN already exists" ; exit 1 ; }

    [[ "$FN" != '' && -s "$FN" ]] &&
	{ echo "ERROR: File $FN already exists" ; exit 1 ; }

    [[ "$CAFN" != '' && -s "$CAFN" ]] &&
	{ echo "ERROR: File $CAFN already exists" ; exit 1 ; }

    [[ "$PKCS12FN" != '' && -s "$PKCS12FN" ]] &&
	{ echo "ERROR: File $PKCS12FN already exists" ; exit 1 ; }

    [[ "$CRLFN" != '' && -s "$CRLFN" ]] &&
	{ echo "ERROR: File $CRLFN already exists" ; exit 1 ; }

    SSKEY="$(mkkey)"

    build_v3_extensions
    apply_options
    create_main_cert	# or csr
    create_suca_pem
    sign_created_csr

    create_crl_file
    create_pfx_file

    [[ "$KFN" = '' ]] && umask 077
    if [[ "$FN" != '' ]] ; then outp > "$FN" ; else outp ; fi

    exit 0
}

init_vars() {
NL='
'
    export OPENSSL_CONF=/dev/null
    FN=
    KFN=
    CRLFN=
    CAFN=
    SERIAL=
    CERT_DAYS=
    DEFAULT_DAYS=7304
    EC=prime256v1

    V3=no
    V3HEAD=
    SANLIST=
    V3SAN=
    V3OPTS=
    V3LIST=
    V3EXTRAS=
    V3CERTONLY=
    V3CA=
    V3CRL=
    V3CAPATH=
    V3CLIENT=no
    V3SERVER=no
    V3EMAIL=no
    V3TIMESTAMP=no
    V3CRITICAL=no
    V3NS=no
    V3ENS=

    NOPKEY="$(openssl no-pkey >/dev/null 2>&1 && echo yes || echo no)"
    NOECPARAM="$(openssl no-ecparam >/dev/null 2>&1 && echo yes || echo no)"
    NOSETSERIAL=
    KEYPASS=
    PFXPASS="pass:"
    WANTCSR=no
    MAKECSR=no
    ADDDNQ=no
    SHOWCSR=no
    SHOWCONF=
    CSRTEXT=
    SIGNPFX=
    SIGNPEM=
    SINGLEUSECA=
    V3SUCA=
    PKCS12FN=
    POLICYTEXT=
    POLICYOID=
    NOPROMPT=
    NOKEYID=

    CIPHER=-aes128
    DGST=

    SUBJTYPE=
    SUBJ=
    CASUBJ=

    SUBJ_ID=0
    SUBJ_C=
    SUBJ_ST=
    SUBJ_L=
    SUBJ_O=
    SUBJ_DC=
    SUBJ_OU=
    SUBJ_CN=
    SUBJ_DNQ=
    SUBJ_XX=
    CRLURI=
    CRLURI_ID=0
    EXTRA_OIDS=

    # Faketime prefix
    ft() { "$@" ; }

    # This is my default for making a key file.
    if [[ "$NOECPARAM" = no ]]; then
	mkkey() { openssl ecparam -name "$EC" -genkey -noout ;}
	mktmpkey() { openssl ecparam -name "$EC" -genkey -noout ;}
    else
	mkkey() { openssl genrsa ; }
	mktmpkey() { openssl genrsa 512 2>/dev/null ; }
    fi
    # See also:
    # mkkey() { openssl genpkey -paramfile <(openssl genpkey -genparam -algorithm ec -pkeyopt ec_paramgen_curve:prime256v1) ;}

    X509SECT=req_x509
    V3INIT="x509_extensions=$X509SECT${NL}req_extensions=$X509SECT$NL[$X509SECT]$NL"

    UTF8=
    if [[ "$(locale charmap 2>/dev/null)" = UTF-8 ]]
    then
	if openssl req -help 2>&1 | grep -q -e -utf8
	then UTF8=-utf8
	fi
    fi
}

decode_args() {
    for ar
    do  case "$ar" in
	-h|-help|--help) show_help_text ;;

	-showconf ) SHOWCONF=yes ;;

	-days[=:]* ) CERT_DAYS="${ar#*[=:]}" ;;
	-alldays )
	    if faketime -h 2>/dev/null | grep -qi libfaketime
	    then ft() { faketime -f '1999-01-01 12:00:00' "$@" ; }
	    fi

	    CERT_DAYS=$((2932896 - $(ft date +%s)/86400))
	    ;;

	-out[=:]* ) FN="${ar#*[=:]}" ;;
	-keyout[=:]* ) KFN="${ar#*[=:]}" ;;
	-crlout[=:]* ) CRLFN="${ar#*[=:]}" ; V3CRL=yes ;;
	-caout[=:]* ) CAFN="${ar#*[=:]}" ;;

	-ser[=:]??*|-serial[=:]??* )
	    SERIAL="${ar#*[=:]}"
	    SERIAL="${SERIAL//[-: .,;]/}"
	    ;;

	-dnq ) ADDDNQ=yes ;;
	-dnq[=:]* )
	    SUBJTYPE="${SUBJTYPE:-conf}"
	    if [[ "$SUBJTYPE" != "conf" ]] ; then
		echo >&2 "Duplicate subject name definition at '$ar'"; exit 1
	    fi

	    SUBJ_ID=$((SUBJ_ID+1))
	    SUBJ_DNQ="$SUBJ_DNQ${NL}$SUBJ_ID.dnQualifier=${ar#*[=:]}"
	    ;;

	-rsa[=:]* ) eval "mkkey() { openssl genrsa '${ar#*[=:]}' ; }" ;;
	-dsa[=:]* ) eval "mkkey() { openssl dsaparam -noout -genkey '${ar#*[=:]}' ; }" ;;
	-ec[=:]* ) 
		ar="${ar#*[=:]}:" ; curve="${ar%%:*}"
		ar="${ar#*:}:" ; param="${ar%%:*}"
		ar="${ar#*:}:" ; noseed="${ar%%:*}"

		case "$curve" in
		192 ) curve=prime192v1 ;;
		224 ) curve=secp224r1 ;;
		256 ) curve=prime256v1 ;;
		384 ) curve=secp384r1 ;;
		521 ) curve=secp521r1 ;;

		[0-9]*[0-9] )
		    ncurve="$(openssl ecparam -list_curves| grep " $curve bit" |
			    awk -F: '/:/{print $1;exit;}' | tr -d ' ' )"
		    [[ "$ncurve" != "" ]] && curve="$ncurve"
		    ;;
		esac

		eval "mkkey() { openssl ecparam -name '$curve' ${param:+-param_enc $param} ${noseed:+-no_seed} -genkey -noout ; }"
		;;

	-dsa )
	    # FIPS used to force 1024, so lots of hardware and protocols did too.
	    # 1024 bits is now considered unsafe against the most capable
	    # attackers and barely safe against publicly known attacks.
	    DGST="${DGST:--sha1}"
	    mkkey() { openssl dsaparam -noout -genkey 1024; }
	    ;;

	-rsa ) mkkey() { openssl genrsa ; } ;;
	-ec )  mkkey() { openssl ecparam -name "$EC" -genkey -noout ; } ;;

	-list[-_]curves|-show[_-]curves )
	    openssl ecparam -list_curves ; exit ;;

	-keyfile[=:]* )
	    eval "mkkey() { cat < '${ar#*[=:]}' ; }"
	    [[ "$KFN" = "" ]] && KFN=/dev/null
	    ;;

	-csr ) WANTCSR=yes ; MAKECSR=yes ;;
	-csrin[=:]* )
	    eval "mkkey() { :; }"
	    CSRFN="${ar#*[=:]}"
	    KFN=/dev/null
	    ;;
	-showcsr ) SHOWCSR=yes ;;

	-sign[=:]*.pfx )
	    SIGNPFX="${ar#*[=:]}"
	    MAKECSR=yes
	    ;;

	-sign[=:]* )
	    SIGNPEM="$(cat "${ar#*[=:]}")"
	    MAKECSR=yes
	    ;;

	-singleuseca|-suca ) MAKECSR=yes ; SINGLEUSECA=yes ;;

	-v3singleuseca|-v3suca ) MAKECSR=yes ; SINGLEUSECA=yes ; V3SUCA=yes ;;

	-pkcs12[=:]*|-pfx[=:]* )
	    PKCS12FN="${ar#*[=:]}"
	    [[ "$FN" = "" ]] && FN=/dev/null
	    ;;

	-pass[=:]*:* ) KEYPASS="${ar#*[=:]}" ; PFXPASS="$KEYPASS" ;;
	-pass[=:]* ) KEYPASS="pass:${ar#*[=:]}" ; PFXPASS="$KEYPASS" ;;

	-ripemd160|-sha|-sha1|-sha224|-sha256|-sha384|-sha512|-whirlpool)
	    DGST=$ar ;;

	-dgst[=:]* ) DGST="${ar#*[=:]}" ; DGST="-${DGST%-}" ;;
	-cipher[=:]* ) CIPHER="${ar#*[=:]}" ; CIPHER="-${CIPHER%-}" ;;
	-openssl[:=]* ) eval "openssl() { command '${ar#*[=:]}' \"\$@\" ; }" ;;

	-v3 ) V3=yes ;;
	-v3ca|-ca ) V3=yes ; V3CA=yes ;;
	-v3crlsign|-crlsign|-v3crl ) V3=yes ; V3CRL=yes ;;
	-v3lastca|-lastca ) V3=yes ; V3CA=yes ; V3CAPATH=0 ;;
	-v3usr|-usr|-v3user|-user ) V3=yes ; V3CA=no ;;
	-v3server|-server ) V3=yes ; V3SERVER=yes ;;
	-v3client|-client ) V3=yes ; V3CLIENT=yes ;;
	-v3email|-email ) V3=yes ; V3EMAIL=yes ;;
	-v3timestamp|-timestamp ) V3=yes ; V3TIMESTAMP=yes ; V3CRITICAL=yes ;;
	-v3crit|-v3critical|-critical )
	    V3=yes ; V3CRITICAL=yes ; V3CA=${V3CA:-no}
	    ;;
	-v3nokeyid|-nokeyid) NOKEYID=yes ;;

	-v3basicca )
		V3=yes
		V3LIST="$V3LIST${NL}basicConstraints = CA:TRUE"
		;;

	-v3policytext[=:]*|-policytext[=:]*|-poltext[=:]* )
	    V3=yes
	    POLICYTEXT="$(cat "${ar#*[=:]}")"
	    ;;

	-v3policy[=:]*|-policy[=:]* )
	    V3=yes
	    POLICYOID="$POLICYOID,${ar#*[=:]}"
	    ;;

	-v3ns|-ns ) V3=yes ; V3NS=yes ;;
	-v3ns[=:]*|-ns[=:]* )
	    V3=yes
	    V3NS=yes
	    V3ENS="${ar#*[=:]}"
	    ;;

	-v3[=:]* )
		V3=yes
		V3LIST="$V3LIST$NL${ar#*[=:]}"
		;;

	-v3xt[=:]*|-xt[=:]* )
		V3=yes
		V3EXTRAS="$V3EXTRAS$NL${ar#*[=:]}$NL"
		;;

	-v3san[=:]*|-san[=:]* )
		V3=yes ; V3SAN=yes
		sanlst="${ar#*[=:]}"
		for san in ${sanlst//,/ }
		do  [[ "$SANLIST" != "" ]] && SANLIST="${SANLIST%,},"
		    [[ "$san" = '' || "$san" = "$CN" ]] && continue
		    case "$san" in
		    [0-9]*.*.*.*[0-9] ) SANLIST="${SANLIST}IP:$san" ;;
		    [0-9a-fA-F]*:*:*[0-9a-fA-F]|::*[0-9a-fA-F] )
			SANLIST="${SANLIST}IP:$san" ;;
		    *@* ) SANLIST="${SANLIST}email:$san" ;;
		    * ) SANLIST="${SANLIST}DNS:$san" ;;
		    esac
		done
		SANLIST="${SANLIST%,}"
		;;

	-v3san|-san ) V3=yes ; V3SAN=yes ;;

	-v3crlur[il][=:]*|-crlur[il][=:]* )
	    V3=yes
	    CRLURI_ID=$((CRLURI_ID+1))
	    CRLURI="$CRLURI${NL}URI.$CRLURI_ID=${ar#*[=:]}"
	    ;;

	-v3dv|-dv )
	    # Make the certificate policy "Domain validated" and set most
	    # of the other stuff that's supposed to be set.
	    # BUT would also need:
	    #   The certificate must be signed by a CA (not self-signed)
	    #   Add authorityInformationAccess extension
	    #   with OCSP over HTTP extension
	    #   and HTTP URL for issuing certificate
	    #
	    # For example:
	    # -suca \
	    # -v3='authorityInfoAccess = OCSP;URI:http://ocsp.my.host/,caIssuers;URI:http://my.ca/ca.html'
	    V3=yes
	    V3SAN=yes
	    V3SERVER=yes
	    V3CLIENT=yes
	    POLICYOID="$POLICYOID,2.23.140.1.2.1"
	    ;;

	/*=* )
	    if [[ "$SUBJTYPE" != "" ]] ; then
		echo >&2 "Duplicate subject name definition at '$ar'"; exit 1
	    fi
	    SUBJ="$ar"
	    SUBJTYPE=arg
	    ;;

	-no-prompt ) NOPROMPT=yes ;;

	-subj[-_]c[=:]*|-subj[-_]st[=:]*|-subj[-_]l[=:]*|-subj[-_]o[=:]*|\
	-subj[-_]dc[=:]*|-subj[-_]ou[=:]*|-subj[-_]cn[=:]* )
	    SUBJTYPE="${SUBJTYPE:-conf}"
	    if [[ "$SUBJTYPE" != "conf" ]] ; then
		echo >&2 "Duplicate subject name definition at '$ar'"; exit 1
	    fi

	    V="${ar#??????}"
	    C="${V/=*/}"
	    # shellcheck disable=SC2018,SC2019
	    C="$(echo "$C" | tr 'a-z' 'A-Z')"

	    SUBJ_ID=$((SUBJ_ID+1))
	    eval "SUBJ_$C=\"\$SUBJ_$C\${NL}\$SUBJ_ID.$C=\${ar#*[=:]}\""

	    [[ "$C" = CN && "$CN" = '' ]] &&
		CN="${ar#*[=:]}"
	    ;;

	-subj[=:]* )
	    SUBJTYPE="${SUBJTYPE:-conf}"
	    if [[ "$SUBJTYPE" != "conf" ]] ; then
		echo >&2 "Duplicate subject name definition at '$ar'"; exit 1
	    fi
	    V="${ar#*[=:]}"
	    V1="${V/=*/}"
	    V2="${V#*=}"
	    case "$V1" in
	    [0-9]*.*[0-9] ) # Looks kinda like an OID ?
		V3="oid_${V1//./_}"
		EXTRA_OIDS="$EXTRA_OIDS$NL$V3=$V1"
		SUBJ_XX="$SUBJ_XX$NL$V3=$V2"
		;;
	    * ) SUBJ_XX="$SUBJ_XX$NL$V"
		;;
	    esac
	    ;;

	-casubj[=:]* )
	    V="${ar#*[=:]}"
	    case "$V" in
	    /*=* )
		CASUBJ="${CASUBJ%/}${V%/}/"
		;;
	    * ) if [[ "$CASUBJ" = '' ]]
		then CASUBJ="/CN=$V/"
		else CASUBJ="/OU=$V$CASUBJ"
		fi
		;;
	    esac
	    ;;

	-*) echo >&2 "Unknown option: $ar, use -help for help text." ; exit 1 ;;

	* ) SUBJTYPE="${SUBJTYPE:-conf}"
	    if [[ "$SUBJTYPE" != "conf" ]] ; then
		echo >&2 "Duplicate subject name definition at '$ar'"; exit 1
	    fi

	    if [[ "$ar" = "" ]]
	    then SUBJ_CN="$SUBJ_CN${NL}"
		 NOPROMPT=yes
	    elif [[ "$SUBJ_CN" = "" ]]
	    then SUBJ_ID=$((SUBJ_ID+1))
		 SUBJ_CN="$SUBJ_CN${NL}${SUBJ_ID}.CN=$ar"
		 CN="$ar"
	    else SUBJ_ID=$((SUBJ_ID+1))
		 SUBJ_OU="$SUBJ_OU${NL}${SUBJ_ID}.OU=$ar"
	    fi
	    ;;
	esac
    done
}

check_args() {
    [[ "$WANTCSR" = yes && "$SINGLEUSECA" = yes ]] && {
	echo >&2 "Options -csr and -singleuseca conflict"
	exit 1
    }

    # Extract a (passworded) pfx file.
    [[ "$SIGNPFX" != '' ]] && SIGNPEM="$(openssl pkcs12 -nodes -in "$SIGNPFX")"

    # Put the commonName at the start of the san list
    [[ "$V3SAN" = yes ]] && {
	if [[ "$CN" != "" ]]
	then SANLIST="subjectAltName=DNS:$CN,$SANLIST"
	elif [[ "$SANLIST" != '' ]]
	then SANLIST="subjectAltName=$SANLIST"
	fi
	SANLIST="${SANLIST%,}"
    }

    if [[ "$V3TIMESTAMP" = yes && "$V3CLIENT$V3SERVER$V3EMAIL" != nonono ]]
    then
	echo >&2 "A timestamping certificate can only be for timestamping."
	exit 1
    fi

    # Problems?
    if ! openssl x509 -help 2>&1 | grep -qie -set_serial
    then NOSETSERIAL=yes
    fi

    if openssl req -help 2>&1 | grep -qie -subject
    then REQSUBJECT=-subject
    else REQSUBJECT=-text
    fi
}

build_v3_extensions() {
    # Build some V3 certificate extension sets.
    # Like the certificate extensions themselves this is very complex.
    # Your best option is probably:
    #   No option:  A v1 certificate, usually perfectly acceptable.
    #   -v3         An bare v3 certificate; eg: a strict verifiable self signed.
    #   -v3ca       A v3 CA certificate
    #   -v3usr      A v3 certificate labeled as NOT a CA.
    #   -server     A TLS (eg web) server
    #   -client     A TLS client, eg a client certificate for a web server.
    #
    # This ignores the worst of the complexity, most of which was designed to
    # allow CA's to charge more for "special" certificates.
    #
    # NOTE: Using the SAN fields forces this to be a v3 certificate.

    [[ "$V3" != yes ]] && return 0

    V3HEAD="$V3INIT"
    V3XKU=; V3EKU=
    [[ "$V3CRITICAL" != yes ]] && CR= || CR=critical,

    if  [[ "$V3SERVER" = yes || "$V3EMAIL" = yes  || "$V3CLIENT" = yes || "$V3TIMESTAMP" = yes ]]
    then
	if [[ "$SIGNPEM" != "" || "$SINGLEUSECA" = yes ]]
	then V3CA="${V3CA:-no}"
	fi
    fi

    V3P=${V3CAPATH:+, pathlen:$V3CAPATH}

    V3OPTS="$V3OPTS${NL}$SANLIST"

    [[ "$V3CA" = yes ]] && V3OPTS="$V3OPTS${NL}basicConstraints = ${CR}CA:TRUE${V3P}"
    [[ "$V3CA" = yes ]] && V3XKU=keyCertSign,${V3CRL:+cRLSign,}
    [[ "$V3CA" = no ]] && V3OPTS="$V3OPTS${NL}basicConstraints = ${CR}CA:FALSE"

    [[ "$V3SERVER" = yes ]] && V3EKU=$V3EKU,serverAuth
    [[ "$V3CLIENT" = yes ]] && V3EKU=$V3EKU,clientAuth
    [[ "$V3EMAIL" = yes ]] && V3EKU=$V3EKU,emailProtection
    [[ "$V3TIMESTAMP" = yes ]] && V3EKU=$V3EKU,timeStamping

    [[ "$V3EKU" != '' ]] &&
	V3OPTS="$V3OPTS${NL}extendedKeyUsage = $CR${V3EKU#,}"

    if [[ "$V3CA" = '' ]]
    then :
    elif [[ "$V3SERVER" = yes && "$V3CA" != yes ]]
    then
	V3OPTS="$V3OPTS${NL}keyUsage = ${CR}${V3XKU}keyEncipherment,digitalSignature,keyAgreement"
    elif [[ "$V3EMAIL" = yes && "$V3CA" != yes ]]
    then
	V3OPTS="$V3OPTS${NL}keyUsage = ${CR}${V3XKU}keyEncipherment,digitalSignature"
    elif [[ "$V3CLIENT" = yes && "$V3CA" != yes ]]
    then
	V3OPTS="$V3OPTS${NL}keyUsage = ${CR}${V3XKU}digitalSignature"
    elif [[ "$V3TIMESTAMP" = yes && "$V3CA" != yes ]]
    then
	V3OPTS="$V3OPTS${NL}keyUsage = ${CR}${V3XKU}nonRepudiation,digitalSignature"
    elif [[ "$V3XKU" != '' ]]
    then
	V3OPTS="$V3OPTS${NL}keyUsage = ${CR}${V3XKU%,}"
    fi

    if [[ "$V3CA" = yes ]]
    then
	[[ "$V3SERVER" = yes ]] && V3ENS=$V3ENS,sslCA
	[[ "$V3CLIENT" = yes ]] && V3ENS=$V3ENS,sslCA
	[[ "$V3EMAIL" = yes ]] && V3ENS=$V3ENS,emailCA
	if [[ "$V3SERVER" = no && "$V3CLIENT" = no && \
		"$V3EMAIL" = no && "$V3TIMESTAMP" = no ]]
	then
	    V3ENS=$V3ENS,sslCA,emailCA
	fi
    else
	[[ "$V3SERVER" = yes ]] && V3ENS=$V3ENS,server
	[[ "$V3CLIENT" = yes ]] && V3ENS=$V3ENS,client
	[[ "$V3EMAIL" = yes ]] && V3ENS=$V3ENS,email
    fi

    [[ "$V3NS" = yes && "$V3ENS" != '' ]] &&
	V3OPTS="$V3OPTS${NL}nsCertType = ${V3ENS#,}"

    [[ "$V3CA" != '' && "$NOKEYID" != yes ]] && {
	V3CERTONLY="$V3CERTONLY${NL}subjectKeyIdentifier=hash"
	V3CERTONLY="$V3CERTONLY${NL}authorityKeyIdentifier=keyid,issuer${NL}"
    }

    [[ "$CRLURI" != "" ]] && {
	V3OPTS="$V3OPTS${NL}crlDistributionPoints=crl_uri_sect${NL}"

	# crlDistributionPoints ==> W.T.F.
	V3EXTRAS="$V3EXTRAS
	    ${NL}[ crl_uri_sect ]
	    ${NL}fullname=@crl_url_fn
	    ${NL}[ crl_url_fn ]
	    ${NL}$CRLURI$NL"
    }

    [[ "$POLICYTEXT" != "" || "$POLICYOID" != "" ]] && {
	POLICYOID="${POLICYOID#,}"
	[[ "$POLICYOID" = '' ]] && POLICYOID=2.5.29.32.0

	POLICYOID1="${POLICYOID%%,*}"
	POLICYOIDX="${POLICYOID#$POLICYOID1}"

	V3OPTS="$V3OPTS${NL}certificatePolicies=@x509_pol${POLICYOIDX}${NL}"

	build_poltext() {
	    echo '[ x509_pol ]'
	    echo "policyIdentifier = $POLICYOID1"
	    [[ "$POLICYTEXT" != "" ]] && {
		echo 'userNotice=@notice'
		echo '[ notice ]'
		echo "$POLICYTEXT" |
		tr -d '"'"'" |
		sed -e '1s/^/explicitText=/; $ b end; s:$:\\r\\n\\:; :end'
	    }
	    echo
	}
	V3EXTRAS="$V3EXTRAS${NL}$(build_poltext)$NL"
	unset build_poltext
    }

    return 0
}

mk_rand() {
    RH="$(openssl rand -hex "$1" 2>/dev/null ||:)"
    [[ "$RH" = '' ]] &&
	RH="$(openssl rand "$1" | od -x | sed -n '1{s/^[^ ]*//;s/ //gp;}' )"
    echo "$RH"
}

apply_options() {
    [[ "$MAKECSR" = yes ]] && X509= || X509=-x509

    if [[ "$NOPROMPT" = yes ]]
    then
	if [[ "$SUBJTYPE" = '' || "$SUBJTYPE.$SUBJ_ID" = conf.0 ]]
	then
	    if [[ "$ADDDNQ" = yes ]]
	    then SUBJTYPE=conf
	    else SUBJTYPE=arg ; SUBJ=/
	    fi
	fi
    elif [[ "$SUBJTYPE" = '' ]]
    then ADDDNQ=yes
    fi

    [[ "$ADDDNQ" = yes ]] && {
	[[ "$SERIAL" = "" ]] && DNQ="$(mk_rand 8)" || DNQ="$SERIAL"

	[[ "$SERIAL" = "" && "$NOSETSERIAL" != yes ]] &&
	    SERIAL="$DNQ"

	case "$SUBJTYPE" in
	arg ) SUBJ="${SUBJ%/}/dnQualifier=$DNQ/" ;;
	conf ) SUBJ_DNQ="$SUBJ_DNQ${NL}dnQualifier=$DNQ" ;;
	esac
    }

    return 0
}

mkreqconf() {
    echo "# Configure file for WANTCSR=$1 MAKECSR=$2"
    echo 'oid_section = oid_section'
    echo '[req]'
    echo 'distinguished_name = req_distinguished_name'
    [[ "$SUBJTYPE" = conf ]] &&
	echo 'prompt = no'

    if [[ "$2" != no || "$1" = no ]]
    then
	if [[ "$V3OPTS$V3LIST$V3EXTRAS" != "" || "$1" != "yes" ]]
	then
	    echo "$V3HEAD"
	    echo "$V3OPTS"
	    [[ "$1" != yes ]] &&
		echo "$V3CERTONLY"
	    echo "$V3LIST"
	    echo "$V3EXTRAS"
	fi
    fi
    echo '[ req_distinguished_name ]'
    case "$SUBJTYPE" in
    conf )
	echo "$SUBJ_DNQ"
	echo "$SUBJ_C"
	echo "$SUBJ_ST"
	echo "$SUBJ_L"
	echo "$SUBJ_O"
	echo "$SUBJ_DC"
	echo "$SUBJ_OU"
	echo "$SUBJ_CN"
	echo "$SUBJ_XX"
	;;
    "")
	echo 'commonName = Common Name'
	echo 'organizationalUnitName = Organizational Unit Name'
	echo "dnQualifier= Additional subject qualifier"
	if [[ "$SERIAL" != "" ]]
	then echo "dnQualifier_default=$SERIAL"
	else echo "dnQualifier_default=$(mk_rand 8)"
	fi
	;;
    esac
    echo '[oid_section]'
    echo "$EXTRA_OIDS"
    echo '#END'
}

create_main_cert() {
    if [[ "$CSRFN" != "" ]]
    then SSCERT="$(cat "$CSRFN")"
    else
	[[ "$SHOWCONF" = yes ]] && mkreqconf $MAKECSR $WANTCSR

	SSCERT="$(ft openssl req -new $UTF8 $X509 $DGST \
	    -days "${CERT_DAYS:-$DEFAULT_DAYS}" \
	    ${SERIAL:+-set_serial 0x"$SERIAL"} \
	    ${SUBJ:+-subj "$SUBJ"} \
	    -key <(echo "$SSKEY") \
	    -config <(mkreqconf $MAKECSR $WANTCSR) )"

	[[ "$MAKECSR" = yes ]] && CSRTEXT="$SSCERT"
    fi

    return 0
}

create_suca_pem() {
    [[ "$SINGLEUSECA" != yes || "$SIGNPEM" != '' ]] && return 0

    mksucareqconf() {
	echo "# Configure file for a private CA"
	echo '[req]'
	echo 'distinguished_name = req_distinguished_name'
	echo 'prompt = no'
	if [[ "$V3" = yes || "$V3SUCA" = yes ]]
	then echo "$V3INIT"
	     if [[ "$V3CA" = no ]]
	     then
		[[ "$V3CRITICAL" != yes ]] && CR= || CR=critical,
		echo "basicConstraints = ${CR}CA:TRUE,pathlen:0"
		if [[ "$V3CA" = no && "$NOKEYID" != yes ]]
		then
		    echo "subjectKeyIdentifier=hash"
		    echo "authorityKeyIdentifier=keyid,issuer"
		fi
	     else echo "basicConstraints = CA:TRUE"
	     fi
	fi
	echo '[ req_distinguished_name ]'

	if [[ "$SERIAL" != '' ]]
	then echo "dnQualifier=$SERIAL"
	else echo "dnQualifier=$(mk_rand 8)"
	fi

	# Most policies need the issuer subject to have a country code
	# and organisation. The XX code is valid for a CA, the org not
	# so much.
	if [[ "$POLICYOID" != '' ]]
	then echo "C=XX"
	     echo "O=CA"
	fi

	if [[ "$CN" != "" ]]
	then echo "OU=Private CA"
	     echo "CN=$CN"
	else echo "CN=Private CA"
	fi

	echo '#END'
    }

    [[ "$SERIAL" = "" ]] && SERIAL="$(mk_rand 8)"
    CAKEY="$(mkkey)"

    [[ "$NOSETSERIAL" != yes ]] && CASER="$(mk_rand 8)"

    [[ "$SHOWCONF" = yes ]] && mksucareqconf

    SIGNPEM="$(ft openssl req -new $UTF8 -x509 $DGST \
	    -days "${CERT_DAYS:-$DEFAULT_DAYS}" \
	    ${CASER:+-set_serial 0x"$CASER"} \
	    ${CASUBJ:+-subj "$CASUBJ"} \
	    -key <(echo "$CAKEY") \
	    -config <(mksucareqconf)
	echo "$CAKEY" )"

    unset mksucareqconf
}

sign_created_csr() {

    [[ "$SIGNPEM" = "" ]] && return 0

    [[ "$SERIAL" = "" ]] && SERIAL="$(mk_rand 8)"

    # Default to days left on CA certificate
    [[ "$CERT_DAYS" = "" ]] && {
	ENDDAY="$(date +%s --date="$(openssl x509 -noout -enddate -in <(echo "$SIGNPEM") | sed 's/^[^=]*=//')" ||:)"
	TODAY="$(ft date +%s)"
	[[ "$ENDDAY" = "" ]] && ENDDAY=2932896 || ENDDAY=$((ENDDAY/86400))
	CERT_DAYS=$((ENDDAY - TODAY/86400))
    }

    # Do we have to override the CSR's common name?
    if [[ "$CSRFN" != "" && "$SUBJTYPE" != "" ]]
    then
	if ! openssl x509 -help 2>&1 | grep -qie -force_pubkey
	then echo >&2 "ERROR: Cannot override name from csr with $(openssl version)"
	     exit 1
	fi

	# First extract the public key from the existing CSR.
	FORCEPUB="$(echo "$SSCERT" | openssl req -pubkey -noout)"

	# Openssl req requires a key, make it something quick.
	TMPKEY="$(mktmpkey)"

	[[ "$SHOWCONF" = yes ]] && mkreqconf yes no

	# Make the new request with the new name.
	SSCERT="$(openssl req -new $UTF8 \
	    ${SUBJ:+-subj "$SUBJ"} \
	    -key <(echo "$TMPKEY") \
	    -config <(mkreqconf yes no) )"
    else
	FORCEPUB=""
    fi

    # Very old versions of openssl ...
    if [[ "$NOSETSERIAL" = yes ]]
    then
	SERIALFN=/tmp/_$$.tmp
	echo "$SERIAL" > "$SERIALFN"
	unset SERIAL
    else SERIALFN=
    fi

    [[ "$SHOWCONF" = yes ]] && mkreqconf

    SSCERT="$(ft openssl x509 -req $DGST \
	    -days "${CERT_DAYS:-$DEFAULT_DAYS}" \
	    ${SERIAL:+-set_serial 0x"$SERIAL"} \
	    ${SERIALFN:+-CAserial "$SERIALFN"} \
	    -in <(echo "$SSCERT") \
	    -CA <(echo "$SIGNPEM") \
	    -CAkey <(echo "$SIGNPEM") \
	    ${FORCEPUB:+-force_pubkey <(echo "$FORCEPUB") } \
	    ${V3HEAD:+-extfile <(mkreqconf) -extensions "$X509SECT"} )"

    [[ "$SERIALFN" != '' ]] && rm "$SERIALFN" # Sigh

    return 0
}

create_crl_file() {
    [[ "$CRLFN" = "" ]] && return 0

    [[ "$WANTCSR" = yes ]] && {
	echo >&2 "ERROR: Cannot make a CRL for a CSR"
	exit 1
    }

    if [[ "$SIGNPEM" != '' ]]
    then CRLSIGN="$SIGNPEM"
    else CRLSIGN="$SSCERT$NL$SSKEY"
    fi

    mkcacrlconf() {
	echo '[ca]'
	echo 'default_ca = CA_default'
	echo '[CA_default]'
	echo "database = $TMP/index.txt"
	if [[ "$NOPKEY" = no ]]
	then echo 'default_md = default'
	else echo 'default_md = sha256'
	fi
    }

    TMP=/tmp/ca_tmp.$$
    mkdir -m u=rwx "$TMP"
    touch $TMP/index.txt
    touch $TMP/index.txt.attr

    ft openssl ca \
	-config <(mkcacrlconf) \
	-gencrl \
	-crldays "${CERT_DAYS:-$DEFAULT_DAYS}" \
	-keyfile <(echo "$CRLSIGN") \
	-cert <(echo "$CRLSIGN") \
	-out "$CRLFN"

    rm -fr "$TMP"

    unset mkcacrlconf
    return 0
}

create_pfx_file() {
    [[ "$PKCS12FN" = "" ]] && return 0

    [[ "$WANTCSR" = yes ]] && { echo >&2 "PKCS12 files can't hold csr's"; exit 1;}

    openssl pkcs12 -export -passout "$PFXPASS" \
	-out "$PKCS12FN" \
	-name "$CN til: $(echo "$SSCERT" | openssl x509 -noout -enddate |
			  sed -n 's/.*= *//p')" \
	-inkey <(echo "$SSKEY") \
	-in <(echo "$SSCERT") \
	${SIGNPEM:+-certfile <(echo "$SIGNPEM" | openssl x509) } \
	${SIGNPEM:+-caname "$(echo "$SIGNPEM" | openssl x509 -noout \
		-subject -nameopt multiline | sed -n 's/ *commonName *= //p'
		) CA til: $(echo "$SIGNPEM" | openssl x509 -noout -enddate |
		  sed -n 's/.*= *//p' )"}

    return 0
}

outp() {
    if [[ "$WANTCSR" = yes ]]
    then echo "$SSCERT" | openssl req $REQSUBJECT
    else echo "$SSCERT" | openssl x509 -subject -issuer -fingerprint -serial -dates
    fi

    [[ "$SINGLEUSECA" = yes ]] && {
	if [[ "$CAFN" != '' ]]
	then echo "$SIGNPEM" | openssl x509 -subject -serial -dates >"$CAFN"
	else echo "$SIGNPEM" | openssl x509 -subject -serial -dates
	fi
    }

    [[ "$CSRTEXT" != "" && "$SHOWCSR" = yes ]] &&
	echo "$CSRTEXT"

    if [[ "$KFN" = '/dev/null' ]]
    then :
    elif [[ "$KFN" != '' ]]
    then umask 077
	 outk > "$KFN"
    else outk
    fi
}

outk() {
    if [[ "$KEYPASS" != "" ]]
    then echo "$SSKEY" | openssl pkey ${KEYPASS:+$CIPHER -passout "$KEYPASS"}
	 echo 'Public key for above key is:'
	 echo "$SSKEY" | openssl pkey -pubout
    else echo "$SSKEY"
    fi
}

main "$@"
