#!/bin/bash
if [ ! -n "$BASH_VERSION" ];then exec bash "$0" "$@";else set +o posix;fi
set -e

export OPENSSL_CONF=/dev/null
FN=
KFN=
CRLFN=
CAFN=
SERIAL=
CERT_DAYS=
DEFAULT_DAYS=3652

V3=no
V3HEAD=
SANLIST=
V3SAN=
V3OPTS=
V3LIST=
V3EXTRAS=
V3CERTONLY=
V3CA=
V3CRL=
V3CAPATH=
V3CLIENT=no
V3SERVER=no
V3EMAIL=no
V3CRITICAL=no
V3NS=no
V3ENS=

NOPKEY="$(openssl no-pkey >/dev/null 2>&1 && echo yes || echo no)"
NOECPARAM="$(openssl no-ecparam >/dev/null 2>&1 && echo yes || echo no)"
NOSETSERIAL=
KEYPASS=
WANTCSR=no
MAKECSR=no
ADDDNQ=no
SHOWCSR=no
SHOWCONF=
CSRTEXT=
SIGNPFX=
SIGNPEM=
SINGLEUSECA=
PKCS12FN=
POLICYTEXT=
ONEKEY=
NOPROMPT=

CIPHER=-aes128
DGST=

SUBJTYPE=
SUBJ=
CASUBJ=
# shellcheck disable=SC2034
{
SUBJ_C=
SUBJ_C_ID=0
SUBJ_ST=
SUBJ_ST_ID=0
SUBJ_L=
SUBJ_L_ID=0
SUBJ_O=
SUBJ_O_ID=0
SUBJ_DC=
SUBJ_DC_ID=0
SUBJ_OU=
SUBJ_OU_ID=0
SUBJ_CN=
SUBJ_CN_ID=0
SUBJ_DNQ=
SUBJ_DNQ_ID=0
}

# This is my default for making a key file.
if [ "$NOECPARAM" = no ] ; then
    mkkey() { openssl ecparam -name prime256v1 -genkey -noout ;}
    mktmpkey() { openssl ecparam -name prime256v1 -genkey -noout ;}
else
    mkkey() { openssl genrsa ; }
    mktmpkey() { openssl genrsa 512 2>/dev/null ; }
fi
# See also:
# mkkey() { openssl genpkey -paramfile <(openssl genpkey -genparam -algorithm ec -pkeyopt ec_paramgen_curve:prime256v1) ;}

NL='
'
X509SECT=req_x509
V3INIT="x509_extensions = $X509SECT
req_extensions = $X509SECT
[ $X509SECT ]
"

UTF8=
if [ "$(locale charmap 2>/dev/null)" = UTF-8 ]
then
    if openssl req -help 2>&1 | grep -q -e -utf8
    then UTF8=-utf8
    fi
fi

for ar
do  case "$ar" in

    -showconf ) SHOWCONF=yes ;;

    -days[=:]* ) CERT_DAYS="${ar#*[=:]}" ;;
    -alldays ) CERT_DAYS=$((2932896 - $(date +%s)/86400)) ;;
    -out[=:]* ) FN="${ar#*[=:]}" ;;
    -keyout[=:]* ) KFN="${ar#*[=:]}" ;;
    -crlout[=:]* ) CRLFN="${ar#*[=:]}" ; V3CRL=yes ;;
    -caout[=:]* ) CAFN="${ar#*[=:]}" ;;

    -ser[=:]??*|-serial[=:]??* ) SERIAL="${ar#*[=:]}" ;;
    -dnq ) ADDDNQ=yes ;;
    -dnq[=:]* )
	SUBJTYPE="${SUBJTYPE:-conf}"
	if [ "$SUBJTYPE" != "conf" ] ; then
	    echo >&2 "Duplicate subject name definition at '$ar'"; exit 1
	fi

	SUBJ_DNQ_ID=$((SUBJ_DNQ_ID+1))
	SUBJ_DNQ="$SUBJ_DNQ${NL}$SUBJ_DNQ_ID.dnQualifier=${ar#*[=:]}"
	;;

    -rsa[=:]* ) eval "mkkey() { openssl genrsa '${ar#*[=:]}' ; }" ;;
    -dsa[=:]* ) eval "mkkey() { openssl dsaparam -noout -genkey '${ar#*[=:]}' ; }" ;;
    -ec[=:]* ) 
	    ar="${ar#*[=:]}:" ; curve="${ar%%:*}"
	    ar="${ar#*:}:" ; param="${ar%%:*}"
	    ar="${ar#*:}:" ; noseed="${ar%%:*}"
	    eval "mkkey() { openssl ecparam -name '$curve' ${param:+-param_enc $param} ${noseed:+-no_seed} -genkey -noout ; }"
	    ;;
    -rsa ) eval "mkkey() { openssl genrsa ; }" ;;

    -list[-_]curves|-show[_-]curves )
	openssl ecparam -list_curves ; exit ;;

    -keyfile[=:]* )
	eval "mkkey() { cat < '${ar#*[=:]}' ; }"
	[ "$KFN" = "" ] && KFN=/dev/null
	;;

    -csr ) WANTCSR=yes ; MAKECSR=yes ;;
    -csrin[=:]* )
	eval "mkkey() { :; }"
	CSRFN="${ar#*[=:]}"
	KFN=/dev/null
	;;
    -showcsr ) SHOWCSR=yes ;;

    -sign[=:]*.pfx )
	SIGNPFX="${ar#*[=:]}"
	MAKECSR=yes
	;;

    -sign[=:]* )
	SIGNPEM="$(cat "${ar#*[=:]}")"
	MAKECSR=yes
	;;

    -singleuseca|-suca ) MAKECSR=yes ; SINGLEUSECA=yes ;;
    -onekeyca ) ONEKEY=yes ; MAKECSR=yes ; SINGLEUSECA=yes ;;

    -poltext[=:]*|-policytext[=:]* )
	POLICYTEXT="$(cat "${ar#*[=:]}")"
	;;

    -pkcs12[=:]* ) PKCS12FN="${ar#*[=:]}" ;;

    -pass[=:]*:* ) KEYPASS="${ar#*[=:]}" ;;
    -pass[=:]* ) KEYPASS="pass:${ar#*[=:]}" ;;

    -ripemd160|-sha|-sha1|-sha224|-sha256|-sha384|-sha512|-whirlpool)
	DGST=$ar ;;

    -dgst[=:]* ) DGST="${ar#*[=:]}" ; DGST="-${DGST%-}" ;;
    -cipher[=:]* ) CIPHER="${ar#*[=:]}" ; CIPHER="-${CIPHER%-}" ;;
    -openssl[:=]* ) eval "openssl() { command '${ar#*[=:]}' \"\$@\" ; }" ;;

    -v3 ) V3=yes ;;
    -v3ca|-ca ) V3=yes ; V3CA=yes ;;
    -v3crlsign|-crlsign|-v3crl ) V3=yes ; V3CRL=yes ;;
    -v3lastca|-lastca ) V3=yes ; V3CA=yes ; V3CAPATH=0 ;;
    -v3usr|-usr|-user ) V3=yes ; V3CA=no ;;
    -v3server|-server ) V3=yes ; V3SERVER=yes ;;
    -v3client|-client ) V3=yes ; V3CLIENT=yes ;;
    -v3email|-email ) V3=yes ; V3EMAIL=yes ;;
    -v3crit|-v3critical|-critical )
	V3=yes ; V3CRITICAL=yes ; V3CA=${V3CA:-no}
	;;

    -v3ns|-ns ) V3=yes ; V3NS=yes ;;
    -v3ns[=:]*|-ns[=:]* )
	V3=yes
	V3NS=yes
	V3ENS="${ar#*[=:]}"
	;;

    -v3[=:]* )
	    V3=yes
	    V3LIST="$V3LIST$NL${ar#*[=:]}"
	    ;;

    -v3xt[=:]*|-xt[=:]* )
	    V3=yes
	    V3EXTRAS="$V3EXTRAS$NL${ar#*[=:]}$NL"
	    ;;

    -v3san[=:]*|-san[=:]* )
	    V3=yes ; V3SAN=yes
	    sanlst="${ar#*[=:]}"
	    for san in ${sanlst//,/ }
	    do  [ "$SANLIST" != "" ] && SANLIST="${SANLIST%,},"
		[ "$san" = '' -o "$san" = "$CN" ] && continue
		case "$san" in
		[0-9]*.*[0-9] ) SANLIST="${SANLIST}IP:$san" ;;
		*@* ) SANLIST="${SANLIST}email:$san" ;;
		* ) SANLIST="${SANLIST}DNS:$san" ;;
		esac
	    done
	    SANLIST="${SANLIST%,}"
	    ;;

    -v3san|-san ) V3=yes ; V3SAN=yes ;;

    /*=* )
	if [ "$SUBJTYPE" != "" ] ; then
	    echo >&2 "Duplicate subject name definition at '$ar'"; exit 1
	fi
	SUBJ="$ar"
	SUBJTYPE=arg
	;;

    -no-prompt ) NOPROMPT=yes ;;

    -subj[-_]c[=:]*|-subj[-_]st[=:]*|-subj[-_]l[=:]*|-subj[-_]o[=:]*|\
    -subj[-_]dc[=:]*|-subj[-_]ou[=:]*|-subj[-_]cn[=:]* )
	SUBJTYPE="${SUBJTYPE:-conf}"
	if [ "$SUBJTYPE" != "conf" ] ; then
	    echo >&2 "Duplicate subject name definition at '$ar'"; exit 1
	fi

	V="${ar#??????}"
	C="${V/=*/}"
	# shellcheck disable=SC2018,SC2019
	C="$(echo "$C" | tr 'a-z' 'A-Z')"

	eval "SUBJ_${C}_ID=\$((SUBJ_${C}_ID+1))"
	eval "SUBJ_$C=\"\$SUBJ_$C\${NL}\$SUBJ_${C}_ID.$C=\${ar#*[=:]}\""

	[ "$C" = CN -a "$CN" = '' ] &&
	    CN="${ar#*[=:]}"
	;;

    -casubj[=:]* )
	V="${ar#*[=:]}"
	case "$V" in
	/*=* )
	    CASUBJ="${CASUBJ%/}${V%/}/"
	    ;;
	* ) if [ "$CASUBJ" = '' ]
	    then CASUBJ="/CN=$V/"
	    else CASUBJ="/OU=$V$CASUBJ"
	    fi
	    ;;
	esac
	;;

    -*) echo >&2 "Unknown option: $ar" ; exit 1 ;;

    * ) SUBJTYPE="${SUBJTYPE:-conf}"
	if [ "$SUBJTYPE" != "conf" ] ; then
	    echo >&2 "Duplicate subject name definition at '$ar'"; exit 1
	fi

	if [ "$CN" = "" ]
	then SUBJ_CN_ID=$((SUBJ_CN_ID+1))
	     SUBJ_CN="$SUBJ_CN${NL}${SUBJ_CN_ID}.CN=$ar"
	     CN="$ar"
	else SUBJ_OU_ID=$((SUBJ_OU_ID+1))
	     SUBJ_OU="$SUBJ_OU${NL}${SUBJ_OU_ID}.OU=$ar"
	fi
	;;
    esac
done

[ "$WANTCSR" = yes -a  "$SINGLEUSECA" = yes ] && {
    echo >&2 "Options -csr and -singleuseca conflict"
    exit 1
}

# Extract a (passworded) pfx file.
[ "$SIGNPFX" != '' ] && SIGNPEM="$(openssl pkcs12 -nodes -in "$SIGNPFX")"

# Put the commonName at the start of the san list
[ "$V3SAN" = yes ] && {
    if [ "$CN" != "" ]
    then SANLIST="subjectAltName=DNS:$CN,$SANLIST"
    elif [ "$SANLIST" != '' ]
    then SANLIST="subjectAltName=$SANLIST"
    fi
    SANLIST="${SANLIST%,}"
}

# Problems?
if ! openssl x509 -help 2>&1 | grep -qie -set_serial
then NOSETSERIAL=yes
fi

if openssl req -help 2>&1 | grep -qie -subject
then REQSUBJECT=-subject
else REQSUBJECT=-text
fi

# Build some V3 certificate extension sets.
# Like the certificate extensions themselves this is very complex.
# Your best option is probably:
#   No option:  A v1 certificate, usually perfectly acceptable.
#   -v3         An bare v3 certificate; eg: a strict verifiable self signed.
#   -v3ca       A v3 CA certificate
#   -v3usr      A v3 certificate labeled as NOT a CA.
#   -server     A TLS (eg web) server
#   -client     A TLS client, eg a client certificate for a web server.
#
# This ignores the worst of the complexity, most of which was designed to
# allow CA's to charge more for "special" certificates.
#
# NOTE: Using the SAN fields forces this to be a v3 certificate.

[ "$V3" = yes ] && {
    V3HEAD="$V3INIT"
    V3XKU=; V3EKU=
    [ "$V3CRITICAL" != yes ] && CR='' || CR=critical,

    [ "$V3SERVER" = yes -o "$V3EMAIL" = yes -o "$V3CLIENT" = yes ] && {
	if [ "$SIGNPEM" != "" -o "$SINGLEUSECA" = yes ]
	then V3CA="${V3CA:-no}"
	elif [ "$V3CA" = '' ]
	then V3XKU=keyCertSign,${V3CRL:+cRLSign,}
	fi
    }

    V3P=${V3CAPATH:+, pathlen:$V3CAPATH}

    [ "$V3CA" = yes ] && V3OPTS="$V3OPTS${NL}basicConstraints = ${CR}CA:TRUE${V3P}"
    [ "$V3CA" = yes ] && V3XKU=keyCertSign,${V3CRL:+cRLSign,}
    [ "$V3CA" = no ] && V3OPTS="$V3OPTS${NL}basicConstraints = ${CR}CA:FALSE"

    if [ "$V3SERVER" = yes -a "$V3CA" != yes ]
    then
        V3OPTS="$V3OPTS${NL}keyUsage = ${CR}${V3XKU}keyEncipherment,digitalSignature,keyAgreement"
    elif [ "$V3EMAIL" = yes -a "$V3CA" != yes ]
    then
        V3OPTS="$V3OPTS${NL}keyUsage = ${CR}${V3XKU}keyEncipherment,digitalSignature"
    elif [ "$V3CLIENT" = yes -a "$V3CA" != yes ]
    then
        V3OPTS="$V3OPTS${NL}keyUsage = ${CR}${V3XKU}digitalSignature"
    elif [ "$V3XKU" != '' ]
    then
        V3OPTS="$V3OPTS${NL}keyUsage = ${CR}${V3XKU%,}"
    fi

    [ "$V3SERVER" = yes ] && V3EKU=$V3EKU,serverAuth
    [ "$V3CLIENT" = yes ] && V3EKU=$V3EKU,clientAuth
    [ "$V3EMAIL" = yes ] && V3EKU=$V3EKU,emailProtection

    if [ "$V3CA" = yes ]
    then
	[ "$V3SERVER" = yes ] && V3ENS=$V3ENS,sslCA
	[ "$V3CLIENT" = yes ] && V3ENS=$V3ENS,sslCA
	[ "$V3EMAIL" = yes ] && V3ENS=$V3ENS,emailCA
	[ "$V3SERVER" = no -a "$V3CLIENT" = no -a "$V3EMAIL" = no ] &&
	    V3ENS=$V3ENS,sslCA,emailCA
    else
	[ "$V3SERVER" = yes ] && V3ENS=$V3ENS,server
	[ "$V3CLIENT" = yes ] && V3ENS=$V3ENS,client
	[ "$V3EMAIL" = yes ] && V3ENS=$V3ENS,email
    fi

    [ "$V3EKU" != '' ] &&
	V3OPTS="$V3OPTS${NL}extendedKeyUsage = ${V3EKU#,}"

    [ "$V3NS" = yes -a "$V3ENS" != '' ] &&
	V3OPTS="$V3OPTS${NL}nsCertType = ${V3ENS#,}"

    [ "$V3CA" != '' ] && {
	V3OPTS="$V3OPTS${NL}subjectKeyIdentifier=hash"
	V3CERTONLY="$V3CERTONLY${NL}authorityKeyIdentifier=keyid,issuer${NL}"
    }

    # shellcheck disable=SC2016
    [ "$POLICYTEXT" != "" ] && {
	V3LIST="$V3LIST${NL}certificatePolicies=@x509_pol${NL}"
	build_poltext() {
	    echo '[ x509_pol ]'
	    echo 'policyIdentifier = 2.5.29.32.0'
	    echo 'userNotice=@notice'
	    echo '[ notice ]'
	    echo "$POLICYTEXT" |
	    tr -d '"'"'" |
	    sed -e '1s/^/explicitText=/; $b end; s:$:\\r\\n\\:; :end'
	    echo
	}
	V3EXTRAS="$V3EXTRAS${NL}$(build_poltext)$NL"
	unset build_poltext
    }
}

[ "$KFN" != '' -a "$KFN" != /dev/null -a -s "$KFN" ] &&
    { echo ERROR: File $KFN already exists ; exit 1 ; }

[ "$KFN" != '' -a -s "$FN" ] &&
    { echo ERROR: File $FN already exists ; exit 1 ; }

mk_rand() {
    RH="$(openssl rand -hex "$1" 2>/dev/null ||:)"
    [ "$RH" = '' ] &&
	RH="$(openssl rand "$1" | od -x | sed -n '1{s/^[^ ]*//;s/ //gp;}' )"
    echo "$RH"
}

[ "$MAKECSR" = yes ] && X509='' || X509=-x509

[ "$NOPROMPT" = yes -a "$SUBJTYPE" = '' ] && {
    if [ "$ADDDNQ" = yes ]
    then SUBJTYPE=conf
    else SUBJTYPE=arg ; SUBJ=/
    fi
}

[ "$ADDDNQ" = yes ] && {
    [ "$SERIAL" = "" ] && DNQ="$(mk_rand 8)" || DNQ="$SERIAL"

    [ "$SERIAL" = "" -a "$NOSETSERIAL" != yes ] &&
	SERIAL="$DNQ"

    case "$SUBJTYPE" in
    arg ) SUBJ="${SUBJ%/}/dnQualifier=$DNQ/" ;;
    conf ) SUBJ_DNQ="$SUBJ_DNQ${NL}dnQualifier=$DNQ" ;;
    esac
}

mkreqconf() {
    echo "# Configure file for WANTCSR=$1 MAKECSR=$2"
    echo '[req]'
    echo 'distinguished_name = req_distinguished_name'
    [ "$SUBJTYPE" = conf ] &&
	echo 'prompt = no'

    if [ "$2" != no -o "$1" = no ]
    then
	[ "$V3OPTS$SANLIST$V3LIST$V3EXTRAS" != "" -o "$1" != "yes" ] && {
	    echo "$V3HEAD"
	    echo "$V3OPTS"
	    [ "$1" != yes ] &&
		echo "$V3CERTONLY"
	    echo "$SANLIST"
	    echo "$V3LIST"
	    echo "$V3EXTRAS"
	}
    fi
    echo '[ req_distinguished_name ]'
    case "$SUBJTYPE" in
    conf )
	echo "$SUBJ_DNQ"
	echo "$SUBJ_C"
	echo "$SUBJ_ST"
	echo "$SUBJ_L"
	echo "$SUBJ_O"
	echo "$SUBJ_DC"
	echo "$SUBJ_OU"
	echo "$SUBJ_CN"
	;;
    "")
	echo 'commonName = Common Name'
	echo 'organizationalUnitName = Organizational Unit Name'
	echo "dnQualifier= Additional subject qualifier"
	if [ "$SERIAL" != "" ]
	then echo "dnQualifier_default=$SERIAL"
	else echo "dnQualifier_default=$(mk_rand 8)"
	fi
	;;
    esac
    echo '#END'
}

SSKEY="$(mkkey)"
if [ "$CSRFN" != "" ]
then SSCERT="$(cat "$CSRFN")"
else
    [ "$SHOWCONF" = yes ] && mkreqconf $MAKECSR $WANTCSR

    SSCERT="$(openssl req -new $UTF8 $X509 $DGST \
	-days "${CERT_DAYS:-$DEFAULT_DAYS}" \
	${SERIAL:+-set_serial 0x"$SERIAL"} \
	${SUBJ:+-subj "$SUBJ"} \
	-key <(echo "$SSKEY") \
	-config <(mkreqconf $MAKECSR $WANTCSR) )"

    [ "$MAKECSR" = yes ] && CSRTEXT="$SSCERT"
fi

[ "$SINGLEUSECA" = yes -a "$SIGNPEM" = '' ] && {
    mksucareqconf() {
	echo "# Configure file for a private CA"
	echo '[req]'
	echo 'distinguished_name = req_distinguished_name'
	echo 'prompt = no'
	if [ "$V3" = yes ]
	then echo "$V3INIT"
	     if [ "$V3CA" = no ]
	     then
		[ "$V3CRITICAL" != yes ] && CR='' || CR=critical,
		echo "basicConstraints = ${CR}CA:TRUE,pathlen:0"
		if [ "$V3CA" = no ]
		then
		    echo "subjectKeyIdentifier=hash"
		    echo "authorityKeyIdentifier=keyid,issuer"
		fi
	     else echo "basicConstraints = CA:TRUE"
	     fi
	fi
	echo '[ req_distinguished_name ]'

	if [ "$ONEKEY" = yes -a "$CASER" != '' ]
	then echo "dnQualifier=$CASER"
	     echo "CN=Private CA"
	else
	    if [ "$SERIAL" != '' ]
	    then echo "dnQualifier=$SERIAL"
	    else echo "dnQualifier=$(mk_rand 8)"
	    fi

	    if [ "$CN" != "" ]
	    then echo "OU=Private CA"
		 echo "CN=$CN"
	    else echo "CN=Private CA"
	    fi
	fi

	echo '#END'
    }

    [ "$SERIAL" = "" ] && SERIAL="$(mk_rand 8)"
    if [ "$ONEKEY" != yes ]
    then CAKEY="$(mkkey)"
    else CAKEY="$SSKEY"
    fi
    [ "$NOSETSERIAL" != yes ] && CASER="$(mk_rand 8)"

    [ "$SHOWCONF" = yes ] && mksucareqconf

    # shellcheck disable=SC2086
    SIGNPEM="$(openssl req -new $UTF8 -x509 $DGST \
	    -days "${CERT_DAYS:-$DEFAULT_DAYS}" \
	    ${CASER:+-set_serial 0x"$CASER"} \
	    ${CASUBJ:+-subj "$CASUBJ"} \
	    -key <(echo "$CAKEY") \
	    -config <(mksucareqconf)
	echo "$CAKEY" )"
}

[ "$SIGNPEM" != "" ] && {
    [ "$SERIAL" = "" ] && SERIAL="$(mk_rand 8)"

    # Default to days left on CA certificate
    [ "$CERT_DAYS" = "" ] && {
        ENDDAY="$(date +%s --date="$(openssl x509 -noout -enddate -in <(echo "$SIGNPEM") | sed 's/^[^=]*=//')" ||:)"
        TODAY="$(date +%s)"
        [ "$ENDDAY" = "" ] && ENDDAY=2932896 || ENDDAY=$((ENDDAY/86400))
        CERT_DAYS=$((ENDDAY - TODAY/86400))
    }

    # Do we have to override the CSR's common name?
    if [ "$CSRFN" != "" -a "$SUBJTYPE" != "" ]
    then
	if ! openssl x509 -help 2>&1 | grep -qie -force_pubkey
	then echo >&2 "ERROR: Cannot override name from csr with $(openssl version)"
	     exit 1
	fi

	# First extract the public key from the existing CSR.
	FORCEPUB="$(echo "$SSCERT" | openssl req -pubkey -noout)"

	# Openssl req requires a key, make it something quick.
	TMPKEY="$(mktmpkey)"

	[ "$SHOWCONF" = yes ] && mkreqconf yes no

	# Make the new request with the new name.
	SSCERT="$(openssl req -new $UTF8 \
	    ${SUBJ:+-subj "$SUBJ"} \
	    -key <(echo "$TMPKEY") \
	    -config <(mkreqconf yes no) )"
    else
	FORCEPUB=""
    fi

    # Very old versions of openssl ...
    if [ "$NOSETSERIAL" = yes ]
    then
	SERIALFN=/tmp/_$$.tmp
	echo "$SERIAL" > "$SERIALFN"
	unset SERIAL
    else SERIALFN=
    fi

    [ "$SHOWCONF" = yes ] && mkreqconf

    # shellcheck disable=SC2086
    SSCERT="$(openssl x509 -req $DGST \
	    -days "${CERT_DAYS:-$DEFAULT_DAYS}" \
	    ${SERIAL:+-set_serial 0x"$SERIAL"} \
	    ${SERIALFN:+-CAserial "$SERIALFN"} \
	    -in <(echo "$SSCERT") \
	    -CA <(echo "$SIGNPEM") \
	    -CAkey <(echo "$SIGNPEM") \
	    ${FORCEPUB:+-force_pubkey <(echo "$FORCEPUB") } \
	    ${V3HEAD:+-extfile <(mkreqconf) -extensions "$X509SECT"} )"

    [ "$SERIALFN" != '' ] && rm "$SERIALFN" # Sigh
}

[ "$CRLFN" != "" ] && {
    [ "$WANTCSR" = yes ] && {
	echo >&2 "ERROR: Cannot make a CRL for a CSR"
	exit 1
    }

    if [ "$SIGNPEM" != '' ]
    then CRLSIGN="$SIGNPEM"
    else CRLSIGN="$SSCERT$NL$SSKEY"
    fi

    mkcacrlconf() {
	echo '[ca]'
	echo 'default_ca = CA_default'
	echo '[CA_default]'
	echo "database = $TMP/index.txt"
	if [ "$NOPKEY" = no ]
	then echo 'default_md = default'
	else echo 'default_md = sha256'
	fi
    }

    TMP=/tmp/ca_tmp.$$
    mkdir -p -m u=rwx "$TMP"
    touch $TMP/index.txt
    touch $TMP/index.txt.attr

    openssl ca \
	-config <(mkcacrlconf) \
	-gencrl \
	-crldays "${CERT_DAYS:-$DEFAULT_DAYS}" \
	-keyfile <(echo "$CRLSIGN") \
	-cert <(echo "$CRLSIGN") \
	-out "$CRLFN"

    rm -fr "$TMP"
}

[ "$PKCS12FN" != "" ] && {
    [ "$WANTCSR" = yes ] && { echo >&2 "PKCS12 files can't hold csr's"; exit 1;}
    # shellcheck disable=SC2086
    openssl pkcs12 -export -passout pass: \
	-out "$PKCS12FN" \
	-name "$CN $(date)" \
	-inkey <(echo "$SSKEY") \
	-in <(echo "$SSCERT") \
	${SIGNPEM:+-certfile <(echo "$SIGNPEM" | openssl x509) }
}

outp() {
    if [ "$WANTCSR" = yes ]
    then echo "$SSCERT" | openssl req $REQSUBJECT
    else echo "$SSCERT" | openssl x509 -subject -issuer -fingerprint -serial -dates
    fi

    [ "$SINGLEUSECA" = yes ] && {
	if [ "$CAFN" != '' ]
	then echo "$SIGNPEM" | openssl x509 -subject -serial -dates >"$CAFN"
	else echo "$SIGNPEM" | openssl x509 -subject -serial -dates
	fi
    }

    [ "$CSRTEXT" != "" -a "$SHOWCSR" = yes ] &&
	echo "$CSRTEXT"

    if [ "$KFN" = '/dev/null' ]
    then :
    elif [ "$KFN" != '' ]
    then umask 077
         outk > "$KFN"
    else outk
    fi
}

outk() {
    if [ "$KEYPASS" != "" ]
    then echo "$SSKEY" | openssl pkey ${KEYPASS:+$CIPHER -passout "$KEYPASS"}
    else echo "$SSKEY"
    fi
}

[ "$KFN" = '' ] && umask 077
if [ "$FN" != '' ] ; then outp > "$FN" ; else outp ; fi
