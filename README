
mk-cert bash script
===================

    -subj-cn=String
    -subj-ou=String
    -subj-dc=String
    -subj-o=String
    -subj-l=String
    -subj-st=String
    -subj-c=String

	Set a component of the certificate subject. Some items such as
	DC, OU and CN are allowed to be duplicated. OpenSSL will accept
	duplicates for any item.

	Any arguments without a "-" to make them an option are assumed
	to be part of the subject too, the first is a common name the
	remainder are "OU" items.

	If a argument begins with a "/" and contains an "=" it is
	treated as an OpenSSL subject string. This conflicts with the
	other options for building a subject.

	If no subject is specified one will be prompted for by OpenSSL.

    -days=7304
	How many days should the certificate run for?

    -alldays
	Make the certificate run until 9999-12-31

    -out=FileName )
	Put the certificate, and any other items in a file.

    -keyout=FileName
	Put the private key in a specific file not "-out=" or stdout.

    -crlout=FileName
	Generate an empty CRL using the certificate used to sign.

    -caout=FileName
	Put the certificate used to sign in a specific file.

    -ser=0123456789abcdef
    -serial=0123456789abcdef
	Set the certificate serial number (in hexadecimal).

    -dnq
	Generate and add a dnQualifier item to the subject.

    -dnq=...
	Add a dnQualifier item to the subject.

    -rsa
    -rsa=2048
	Generate RSA private keys.

    -dsa=1024
	Generate DSA private keys.

    -ec:prime256v1
    -ec:curve:encoding
    -ec:curve:encoding:no_seed
	Use OpenSSL ecparam to generate an EC key.

    -list-curves
    -show-curves
	List the EC curves that OpenSSL supports.

    -keyfile=FileName
	Don't generate a key, use the one in FileName

    -csr
	Create a CSR not a certificate

    -csrin=FileName
	Use the CSR from FileName instead of generating a new key.

    -showcsr
	Dump any CSR we use to the output too.

    -sign=FileName
	Use the key and certificate in FileName to sign the certificate,
	note if it's a PFX file it must have a ".pfx" extension.

    -singleuseca
    -suca
	Generate a new CA key for the CA certificate and to sign the standard
	certificate. Discard the CA key and send the CA certificate to the
	output.

    -onekeyca
	Just like -singleuseca, except the CA key is the same as the host key

    -casubj=...
	Set the subject for the single use CA.

    -poltext=FileName
	Add an "all uses" policy extension and include the text from FileName
	as an "issuer statement".

    -pkcs12=FileName
	Create a "pfx" file with the certificate, private key and the
	CA certificate used to sign the certificate.

    -pass:password
    -pass=OpenSSL:pass
	Set a password on the key.

    -dgst=sha1
    -ripemd160, -sha, -sha1, -sha224, -sha256, -sha384, -sha512, -whirlpool
	Select the digest used for signing.

    -cipher=name
	Select the cipher used for encrypting.

    -openssl=/path/to/executable/openssl
	Use the specified copy of openssl, not the one in the PATH.

    -showconf
	Debugging option, show the config files generated for OpenSSL

Version 3 certificate extensions.

    Note V3 extensions are used to limit the uses that a certificate
    can be put to. If you're not concerned with limiting use of the
    private key (ie the user is trusted) then these generally have
    no use. However, some validators insist on certain V3 extensions
    being present.

    The SAN extension is a minor exception to this as it allows multiple
    wildcard DNS names whereas browsers only accept one wildcard CN item
    in the subject.

    -v3
	Make the certificate V3, don't add any extensions though.

    -v3san=SanName
    -san=SanName
	Add a SAN name, or multiple items seperated by commas.
	A dumb huristic is used to identify DNS vs IP vs email items.

    -v3ca, -ca
	Add V3 extensions for a CA certificate.

    -v3crlsign, -crlsign, -v3crl
	For a V3 CA certificate, make sure it's allowed to sign CRLs.

    -v3lastca, -lastca
	For a V3 CA certificate add the 'pathlen:0' to prevent certificates
	that this CA signs being CAs.

    -v3usr, -usr, -user
	Prevent this V3 certificate begin used as a CA.

    -v3server, -server
	Add V3 key usage extensions to prevent the certificate being used
	as anything except an SSL server.
	NB: Can be combined with -v3client or -v3email to allow those.

    -v3client, -client
	Add V3 key usage extensions to prevent the certificate being used
	as anything except an SSL client.
	NB: Can be combined with -v3server or -v3email to allow those.

    -v3email, -email
	Add V3 key usage extensions to prevent the certificate being used
	as anything except a MIME signing or encryption certificate.
	NB: Can be combined with -v3server or -v3client to allow those.

    -v3ns, -ns
	Add the netscape Client/server extensions too.

    -v3ns=...
    -ns=...
	Add a specific list of netscape usages.

    -v3crit, -v3critical, -critical
	Mark CA and key usage extensions as critical.

    -v3='OpenSSL extension config'
	Add any x509 v3 extension config to the OpenSSL config file used
	to create the certificate.

    -v3xt='OpenSSL extension config'
    -xt='OpenSSL extension config'
	Add any x509 v3 extension config to the OpenSSL config file used
	to create the certificate.

	This item is placed after the all "-v3=" items so can be used when
	the config file needs additional sections.
