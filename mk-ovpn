#!/bin/bash -
if [ ! -n "$BASH_VERSION" ];then exec bash "$0" "$@";else set +o posix;fi
[ "$#" = 0 ] && { echo >&2 "Usage: $0 CommonName [Options]" ; exit 1; }
#
# This script creates certificates for OpenVPN tls setups.
# Each key has a different CA certificate created for it and the setup
# is designed so that any machine only has the CA certificates for the
# machines that it is allowed to connect to.
#
# Note the nsCertType flag is not required to make this secure.

export OPENSSL_CONF=/dev/null
CERT_DIR="${CERT_DIR:-certs}"

V3CA=""
V3CERT=""
V3EXTENDED=no
SERVER=no
ECPARAM=prime256v1
CAOU='Private CA'
SERVEROU="OpenVPN Server TLS"
CERTOU=""
CASUBJ=""

V3BASECERT='basicConstraints = critical,CA:FALSE
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer
'
V3BASECA='
x509_extensions = req_x509
[ req_x509 ]
basicConstraints = critical,CA:TRUE, pathlen:0
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
'

# Some options...
for v
do  case "$v" in
    -s|-server ) SERVER=yes ; CAOU='OpenVPN server CA' ;;
    -c|-client ) SERVER=client ; CAOU='OpenVPN client CA' ;;
    -v3 )
	V3CERT="$V3BASECERT"
	V3CA="$V3BASECA"
	;;
    -v3ext )
	V3EXTENDED=yes
	V3CERT="$V3BASECERT"
	V3CA="$V3BASECA"
	;;
    -days=[1-9]*[0-9] ) CERT_DAYS="${v#*=}" ;;
    -ca=* )		CASUBJ="${v#*=}" ;;
    -ou=*|-OU=* )	CERTOU="${v#*=}" ;;
    -* ) echo >&2 "Option $v not recognised"; exit 1;;

    * ) CN="$v" ;;
    esac
done

[ "$V3CERT" != "" -a "$SERVER" = yes ] && {
    if [ "$V3EXTENDED" = yes ] 
    then
	V3CERT="${V3BASECERT}
	keyUsage = keyEncipherment
	extendedKeyUsage = serverAuth
	"
    else
	V3CERT="${V3BASECERT} nsCertType = server "
    fi
}

[ "$V3CERT" != "" -a "$SERVER" = client ] && {
    if [ "$V3EXTENDED" = yes ] 
    then
	V3CERT="${V3BASECERT}
	keyUsage = digitalSignature
	extendedKeyUsage = clientAuth
	"
    else
	V3CERT="${V3BASECERT} nsCertType = client "
    fi
}

CAFILE="$CERT_DIR"/"$CN".ca.crt

[ "$SERVER" = yes ] &&
    CAFILE="$CERT_DIR"/"$CN".ca.cer

[ "$CERTOU" = "" -a "$SERVER" = yes ] &&
    CERTOU="$SERVEROU"

[ "$CASUBJ" = "" ] && CASUBJ="/CN=$CN/OU=$CAOU/"

CERT_DAYS="${CERT_DAYS:-3652}"

[ -s "$CERT_DIR"/"$CN".pem -o -s "$CERT_DIR"/"$CN".key ] &&
    { echo "ERROR: Name '$CN' already exists" ; exit 1 ; }

umask 077
mkdir -p "$CERT_DIR"
set -e

mkconfig() {
    echo '[req]'
    echo 'distinguished_name = req_distinguished_name'
    [ "$1" = ca ] &&
	echo "$V3CA"
    echo '[ req_distinguished_name ]'
}

# Generate the CA key, don't save it to disk.
CAKEY="$(openssl ecparam -name $ECPARAM -genkey)"

# Self sign the CA
openssl req -new -x509 -days "$CERT_DAYS" \
    -subj "$CASUBJ" \
    -key <(echo "$CAKEY") -config <(mkconfig ca) |
openssl x509 -subject > "$CAFILE"

# Make system key, matching the CA type
openssl req -new -nodes \
    -newkey param:"$CAFILE" \
    -subj "${CERTOU:+/OU=$CERTOU}/CN=$CN/" \
    -keyout "$CERT_DIR"/$CN.key \
    -config <(mkconfig) |

# Sign it
openssl x509 -req -days "$CERT_DAYS" \
    -set_serial 0x$(openssl rand -hex 8) \
    -out "$CERT_DIR"/$CN.crt \
    -CA "$CAFILE" \
    -CAkey <(echo "$CAKEY") \
    ${V3CERT:+-extfile <(echo "$V3CERT")}

[ "$SERVER" != yes ] && {
    # Reduce the file list
    cat "$CERT_DIR"/$CN.crt "$CERT_DIR"/$CN.key > "$CERT_DIR"/$CN.pem
    rm "$CERT_DIR"/$CN.crt "$CERT_DIR"/$CN.key
}
